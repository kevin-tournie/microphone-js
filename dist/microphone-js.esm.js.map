{"version":3,"file":"microphone-js.esm.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["export const flattenArray = (\r\n  channelBuffer: Float32Array[],\r\n  recordingLength: number\r\n): Float32Array => {\r\n  let offset = 0;\r\n\r\n  return channelBuffer.reduce((acc, buffer) => {\r\n    acc.set(buffer, offset);\r\n    offset += buffer.length;\r\n    return acc;\r\n  }, new Float32Array(recordingLength));\r\n};\r\n\r\nexport const interleave = (\r\n  leftChannel: Float32Array,\r\n  rightChannel: Float32Array\r\n) => {\r\n  const length = leftChannel.length + rightChannel.length;\r\n\r\n  return leftChannel.reduce((acc, _, index) => {\r\n    const offset = index * 2;\r\n\r\n    acc[offset] = leftChannel[index];\r\n    acc[offset + 1] = leftChannel[index];\r\n    return acc;\r\n  }, new Float32Array(length));\r\n};\r\n\r\nexport const writeUTFBytes = (\r\n  view: DataView,\r\n  offset: number,\r\n  str: string\r\n): any => {\r\n  str\r\n    .split('')\r\n    .map((_, index) => str.charCodeAt(index))\r\n    .forEach((value, idx) => {\r\n      view.setUint8(offset + idx, value);\r\n    });\r\n};\r\n\r\nexport const downsampleBuffer = (\r\n  buffer: Float32Array,\r\n  currentSampleRate: number,\r\n  targetSampleRate: number\r\n) => {\r\n  if (targetSampleRate === currentSampleRate) {\r\n    return buffer;\r\n  }\r\n  var sampleRateRatio = currentSampleRate / targetSampleRate;\r\n  var newLength = Math.round(buffer.length / sampleRateRatio);\r\n  var result = new Float32Array(newLength);\r\n  var offsetResult = 0;\r\n  var offsetBuffer = 0;\r\n  while (offsetResult < result.length) {\r\n    var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\r\n    var accum = 0,\r\n      count = 0;\r\n    for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\r\n      accum += buffer[i];\r\n      count++;\r\n    }\r\n    result[offsetResult] = accum / count;\r\n    offsetResult++;\r\n    offsetBuffer = nextOffsetBuffer;\r\n  }\r\n  return result;\r\n};\r\n","import './types';\r\n\r\nimport {\r\n  writeUTFBytes,\r\n  flattenArray,\r\n  interleave,\r\n  downsampleBuffer,\r\n} from './utils';\r\n\r\nconst NB_CHANNELS = 2;\r\nconst DEFAULT_SAMPLE_RATE = 44100;\r\nconst BUFFER_SIZE = 2048;\r\nconst LEFT_CHAN_DATA = 0;\r\nconst RIGHT_CHAN_DATA = 1;\r\n\r\nconst initialState = () : AudioState => {\r\n    return {    \r\n      leftChan: [],\r\n      rightChan: [],\r\n      recordingLength: 0,\r\n    }\r\n};\r\n\r\nexport const Microphone = (\r\n  instanceConfig?: InstanceConfig\r\n): MicrophoneInstance => {\r\n  let mediaStream: MediaStream | undefined;\r\n  let source: MediaStreamAudioSourceNode | undefined;\r\n  let recorder: ScriptProcessorNode | undefined;\r\n  let blob: Blob | undefined;\r\n  let audioState: AudioState = initialState();\r\n\r\n  const isMono: boolean = !!(instanceConfig && instanceConfig.isMono);\r\n\r\n  const nbChannels: number = isMono ? 1 : NB_CHANNELS;\r\n\r\n  const sampleRate =\r\n    (instanceConfig && instanceConfig.sampleRate) || DEFAULT_SAMPLE_RATE;\r\n\r\n  const config: Config = {\r\n    nbChannels,\r\n    sampleRate,\r\n    bufferSize: BUFFER_SIZE,\r\n    byteRate: sampleRate * nbChannels * 2,\r\n  };\r\n\r\n  const start = async () => {\r\n    mediaStream = await navigator.mediaDevices.getUserMedia({\r\n      audio: true,\r\n      video: false,\r\n    });\r\n\r\n    const audioCtx = new AudioContext();\r\n    const volume = audioCtx.createGain();\r\n    source = audioCtx.createMediaStreamSource(mediaStream);\r\n\r\n    const numberOfInputChannels = 2;\r\n    const numberOfOutputChannels = 2;\r\n\r\n    recorder = audioCtx.createScriptProcessor(\r\n      config.bufferSize,\r\n      numberOfInputChannels,\r\n      numberOfOutputChannels\r\n    );\r\n\r\n    recorder.onaudioprocess = (event: AudioProcessingEvent) => {\r\n      const left: Float32Array = new Float32Array(\r\n        event.inputBuffer.getChannelData(LEFT_CHAN_DATA)\r\n      );\r\n\r\n      audioState.leftChan.push(left);\r\n\r\n      audioState.rightChan.push(\r\n        new Float32Array(event.inputBuffer.getChannelData(RIGHT_CHAN_DATA))\r\n      );\r\n\r\n      audioState.recordingLength += config.bufferSize;\r\n\r\n      if (instanceConfig && instanceConfig.onData) {\r\n        instanceConfig.onData(left);\r\n      }\r\n    };\r\n\r\n    source.connect(volume);\r\n    source.connect(recorder);\r\n    recorder.connect(audioCtx.destination);\r\n  };\r\n\r\n  const reset = () => {\r\n    audioState = initialState();\r\n  };\r\n\r\n  // // http://soundfile.sapp.org/doc/WaveFormat/\r\n  const encodeWav = (data: Float32Array): Blob => {\r\n    const arrayBuffer = new ArrayBuffer(44 + data.length * 2);\r\n    const view = new DataView(arrayBuffer);\r\n\r\n    writeUTFBytes(view, 0, 'RIFF');\r\n    view.setUint32(4, 44 + data.length * 2, true);\r\n    writeUTFBytes(view, 8, 'WAVE');\r\n    writeUTFBytes(view, 12, 'fmt ');\r\n    view.setUint32(16, 16, true);\r\n    view.setUint16(20, 1, true);\r\n    view.setUint16(22, config.nbChannels, true);\r\n    view.setUint32(24, config.sampleRate, true);\r\n    view.setUint32(28, config.byteRate, true);\r\n    view.setUint16(32, 4, true);\r\n    view.setUint16(34, 16, true);\r\n    writeUTFBytes(view, 36, 'data');\r\n    view.setUint32(40, data.length * 2, true);\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      view.setInt16(44 + i * 2, (data[i] as any) * 0x7fff, true);\r\n    }\r\n\r\n    return new Blob([view], { type: 'audio/wav' });\r\n  };\r\n\r\n  const stop = () => {\r\n    if (mediaStream) {\r\n      mediaStream\r\n        .getTracks()\r\n        .forEach((track: MediaStreamTrack) => track.stop());\r\n    }\r\n\r\n    if (recorder) {\r\n      recorder.disconnect();\r\n    }\r\n\r\n    if (source) {\r\n      source.disconnect();\r\n    }\r\n\r\n    const leftChanData = flattenArray(\r\n      audioState.leftChan,\r\n      audioState.recordingLength\r\n    );\r\n    const rightChanData = flattenArray(\r\n      audioState.rightChan,\r\n      audioState.recordingLength\r\n    );\r\n    const array = isMono\r\n      ? leftChanData\r\n      : interleave(leftChanData, rightChanData);\r\n\r\n    const downsampled: Float32Array = downsampleBuffer(\r\n      array,\r\n      DEFAULT_SAMPLE_RATE,\r\n      config.sampleRate\r\n    );\r\n\r\n    blob = encodeWav(downsampled);\r\n  };\r\n\r\n  const download = () => {\r\n    const blob = getBlob();\r\n\r\n    if (!blob || !window || !document || !URL) {\r\n      return;\r\n    }\r\n\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    document.body.appendChild(a);\r\n    a.href = url;\r\n    a.download = `${new Date().toISOString()}.wav`;\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const getBlob = () => blob;\r\n\r\n  return {\r\n    start,\r\n    stop,\r\n    reset,\r\n    download,\r\n    getBlob,\r\n  };\r\n};\r\n"],"names":["flattenArray","channelBuffer","recordingLength","offset","reduce","acc","buffer","set","length","Float32Array","interleave","leftChannel","rightChannel","_","index","writeUTFBytes","view","str","split","map","charCodeAt","forEach","value","idx","setUint8","downsampleBuffer","currentSampleRate","targetSampleRate","sampleRateRatio","newLength","Math","round","result","offsetResult","offsetBuffer","nextOffsetBuffer","accum","count","i","NB_CHANNELS","DEFAULT_SAMPLE_RATE","BUFFER_SIZE","LEFT_CHAN_DATA","RIGHT_CHAN_DATA","initialState","leftChan","rightChan","Microphone","instanceConfig","mediaStream","source","recorder","blob","audioState","isMono","nbChannels","sampleRate","config","bufferSize","byteRate","start","navigator","mediaDevices","getUserMedia","audio","video","audioCtx","AudioContext","volume","createGain","createMediaStreamSource","numberOfInputChannels","numberOfOutputChannels","createScriptProcessor","onaudioprocess","event","left","inputBuffer","getChannelData","push","onData","connect","destination","reset","encodeWav","data","arrayBuffer","ArrayBuffer","DataView","setUint32","setUint16","setInt16","Blob","type","stop","getTracks","track","disconnect","leftChanData","rightChanData","array","downsampled","download","getBlob","window","document","URL","url","createObjectURL","a","createElement","body","appendChild","href","Date","toISOString","click","revokeObjectURL"],"mappings":"AAAO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAC1BC,aAD0B,EAE1BC,eAF0B;MAItBC,MAAM,GAAG,CAAb;SAEOF,aAAa,CAACG,MAAd,CAAqB,UAACC,GAAD,EAAMC,MAAN;IAC1BD,GAAG,CAACE,GAAJ,CAAQD,MAAR,EAAgBH,MAAhB;IACAA,MAAM,IAAIG,MAAM,CAACE,MAAjB;WACOH,GAAP;GAHK,EAIJ,IAAII,YAAJ,CAAiBP,eAAjB,CAJI,CAAP;CANK;AAaP,AAAO,IAAMQ,UAAU,GAAG,SAAbA,UAAa,CACxBC,WADwB,EAExBC,YAFwB;MAIlBJ,MAAM,GAAGG,WAAW,CAACH,MAAZ,GAAqBI,YAAY,CAACJ,MAAjD;SAEOG,WAAW,CAACP,MAAZ,CAAmB,UAACC,GAAD,EAAMQ,CAAN,EAASC,KAAT;QAClBX,MAAM,GAAGW,KAAK,GAAG,CAAvB;IAEAT,GAAG,CAACF,MAAD,CAAH,GAAcQ,WAAW,CAACG,KAAD,CAAzB;IACAT,GAAG,CAACF,MAAM,GAAG,CAAV,CAAH,GAAkBQ,WAAW,CAACG,KAAD,CAA7B;WACOT,GAAP;GALK,EAMJ,IAAII,YAAJ,CAAiBD,MAAjB,CANI,CAAP;CANK;AAeP,AAAO,IAAMO,aAAa,GAAG,SAAhBA,aAAgB,CAC3BC,IAD2B,EAE3Bb,MAF2B,EAG3Bc,GAH2B;EAK3BA,GAAG,CACAC,KADH,CACS,EADT,EAEGC,GAFH,CAEO,UAACN,CAAD,EAAIC,KAAJ;WAAcG,GAAG,CAACG,UAAJ,CAAeN,KAAf,CAAd;GAFP,EAGGO,OAHH,CAGW,UAACC,KAAD,EAAQC,GAAR;IACPP,IAAI,CAACQ,QAAL,CAAcrB,MAAM,GAAGoB,GAAvB,EAA4BD,KAA5B;GAJJ;CALK;AAaP,AAAO,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAC9BnB,MAD8B,EAE9BoB,iBAF8B,EAG9BC,gBAH8B;MAK1BA,gBAAgB,KAAKD,iBAAzB,EAA4C;WACnCpB,MAAP;;;MAEEsB,eAAe,GAAGF,iBAAiB,GAAGC,gBAA1C;MACIE,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWzB,MAAM,CAACE,MAAP,GAAgBoB,eAA3B,CAAhB;MACII,MAAM,GAAG,IAAIvB,YAAJ,CAAiBoB,SAAjB,CAAb;MACII,YAAY,GAAG,CAAnB;MACIC,YAAY,GAAG,CAAnB;;SACOD,YAAY,GAAGD,MAAM,CAACxB,MAA7B,EAAqC;QAC/B2B,gBAAgB,GAAGL,IAAI,CAACC,KAAL,CAAW,CAACE,YAAY,GAAG,CAAhB,IAAqBL,eAAhC,CAAvB;QACIQ,KAAK,GAAG,CAAZ;QACEC,KAAK,GAAG,CADV;;SAEK,IAAIC,CAAC,GAAGJ,YAAb,EAA2BI,CAAC,GAAGH,gBAAJ,IAAwBG,CAAC,GAAGhC,MAAM,CAACE,MAA9D,EAAsE8B,CAAC,EAAvE,EAA2E;MACzEF,KAAK,IAAI9B,MAAM,CAACgC,CAAD,CAAf;MACAD,KAAK;;;IAEPL,MAAM,CAACC,YAAD,CAAN,GAAuBG,KAAK,GAAGC,KAA/B;IACAJ,YAAY;IACZC,YAAY,GAAGC,gBAAf;;;SAEKH,MAAP;CAzBK;;AChCP,IAAMO,WAAW,GAAG,CAApB;AACA,IAAMC,mBAAmB,GAAG,KAA5B;AACA,IAAMC,WAAW,GAAG,IAApB;AACA,IAAMC,cAAc,GAAG,CAAvB;AACA,IAAMC,eAAe,GAAG,CAAxB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe;SACV;IACLC,QAAQ,EAAE,EADL;IAELC,SAAS,EAAE,EAFN;IAGL5C,eAAe,EAAE;GAHnB;CADJ;;AAQA,IAAa6C,UAAU,GAAG,SAAbA,UAAa,CACxBC,cADwB;MAGpBC,WAAJ;MACIC,MAAJ;MACIC,QAAJ;MACIC,IAAJ;MACIC,UAAU,GAAeT,YAAY,EAAzC;MAEMU,MAAM,GAAY,CAAC,EAAEN,cAAc,IAAIA,cAAc,CAACM,MAAnC,CAAzB;MAEMC,UAAU,GAAWD,MAAM,GAAG,CAAH,GAAOf,WAAxC;MAEMiB,UAAU,GACbR,cAAc,IAAIA,cAAc,CAACQ,UAAlC,IAAiDhB,mBADnD;MAGMiB,MAAM,GAAW;IACrBF,UAAU,EAAVA,UADqB;IAErBC,UAAU,EAAVA,UAFqB;IAGrBE,UAAU,EAAEjB,WAHS;IAIrBkB,QAAQ,EAAEH,UAAU,GAAGD,UAAb,GAA0B;GAJtC;;MAOMK,KAAK,YAALA,KAAK;;6BACWC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;QACtDC,KAAK,EAAE,IAD+C;QAEtDC,KAAK,EAAE;OAFW;QAApBhB,WAAW,wBAAX;YAKMiB,QAAQ,GAAG,IAAIC,YAAJ,EAAjB;YACMC,MAAM,GAAGF,QAAQ,CAACG,UAAT,EAAf;QACAnB,MAAM,GAAGgB,QAAQ,CAACI,uBAAT,CAAiCrB,WAAjC,CAAT;YAEMsB,qBAAqB,GAAG,CAA9B;YACMC,sBAAsB,GAAG,CAA/B;QAEArB,QAAQ,GAAGe,QAAQ,CAACO,qBAAT,CACThB,MAAM,CAACC,UADE,EAETa,qBAFS,EAGTC,sBAHS,CAAX;;QAMArB,QAAQ,CAACuB,cAAT,GAA0B,UAACC,KAAD;cAClBC,IAAI,GAAiB,IAAInE,YAAJ,CACzBkE,KAAK,CAACE,WAAN,CAAkBC,cAAlB,CAAiCpC,cAAjC,CADyB,CAA3B;UAIAW,UAAU,CAACR,QAAX,CAAoBkC,IAApB,CAAyBH,IAAzB;UAEAvB,UAAU,CAACP,SAAX,CAAqBiC,IAArB,CACE,IAAItE,YAAJ,CAAiBkE,KAAK,CAACE,WAAN,CAAkBC,cAAlB,CAAiCnC,eAAjC,CAAjB,CADF;UAIAU,UAAU,CAACnD,eAAX,IAA8BuD,MAAM,CAACC,UAArC;;cAEIV,cAAc,IAAIA,cAAc,CAACgC,MAArC,EAA6C;YAC3ChC,cAAc,CAACgC,MAAf,CAAsBJ,IAAtB;;SAdJ;;QAkBA1B,MAAM,CAAC+B,OAAP,CAAeb,MAAf;QACAlB,MAAM,CAAC+B,OAAP,CAAe9B,QAAf;QACAA,QAAQ,CAAC8B,OAAT,CAAiBf,QAAQ,CAACgB,WAA1B;;KAvCS;;;GAAX;;MA0CMC,KAAK,GAAG,SAARA,KAAQ;IACZ9B,UAAU,GAAGT,YAAY,EAAzB;GADF;;;MAKMwC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD;QACVC,WAAW,GAAG,IAAIC,WAAJ,CAAgB,KAAKF,IAAI,CAAC7E,MAAL,GAAc,CAAnC,CAApB;QACMQ,IAAI,GAAG,IAAIwE,QAAJ,CAAaF,WAAb,CAAb;IAEAvE,aAAa,CAACC,IAAD,EAAO,CAAP,EAAU,MAAV,CAAb;IACAA,IAAI,CAACyE,SAAL,CAAe,CAAf,EAAkB,KAAKJ,IAAI,CAAC7E,MAAL,GAAc,CAArC,EAAwC,IAAxC;IACAO,aAAa,CAACC,IAAD,EAAO,CAAP,EAAU,MAAV,CAAb;IACAD,aAAa,CAACC,IAAD,EAAO,EAAP,EAAW,MAAX,CAAb;IACAA,IAAI,CAACyE,SAAL,CAAe,EAAf,EAAmB,EAAnB,EAAuB,IAAvB;IACAzE,IAAI,CAAC0E,SAAL,CAAe,EAAf,EAAmB,CAAnB,EAAsB,IAAtB;IACA1E,IAAI,CAAC0E,SAAL,CAAe,EAAf,EAAmBjC,MAAM,CAACF,UAA1B,EAAsC,IAAtC;IACAvC,IAAI,CAACyE,SAAL,CAAe,EAAf,EAAmBhC,MAAM,CAACD,UAA1B,EAAsC,IAAtC;IACAxC,IAAI,CAACyE,SAAL,CAAe,EAAf,EAAmBhC,MAAM,CAACE,QAA1B,EAAoC,IAApC;IACA3C,IAAI,CAAC0E,SAAL,CAAe,EAAf,EAAmB,CAAnB,EAAsB,IAAtB;IACA1E,IAAI,CAAC0E,SAAL,CAAe,EAAf,EAAmB,EAAnB,EAAuB,IAAvB;IACA3E,aAAa,CAACC,IAAD,EAAO,EAAP,EAAW,MAAX,CAAb;IACAA,IAAI,CAACyE,SAAL,CAAe,EAAf,EAAmBJ,IAAI,CAAC7E,MAAL,GAAc,CAAjC,EAAoC,IAApC;;SAEK,IAAI8B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+C,IAAI,CAAC7E,MAAzB,EAAiC8B,CAAC,EAAlC,EAAsC;MACpCtB,IAAI,CAAC2E,QAAL,CAAc,KAAKrD,CAAC,GAAG,CAAvB,EAA2B+C,IAAI,CAAC/C,CAAD,CAAJ,GAAkB,MAA7C,EAAqD,IAArD;;;WAGK,IAAIsD,IAAJ,CAAS,CAAC5E,IAAD,CAAT,EAAiB;MAAE6E,IAAI,EAAE;KAAzB,CAAP;GAtBF;;MAyBMC,IAAI,GAAG,SAAPA,IAAO;QACP7C,WAAJ,EAAiB;MACfA,WAAW,CACR8C,SADH,GAEG1E,OAFH,CAEW,UAAC2E,KAAD;eAA6BA,KAAK,CAACF,IAAN,EAA7B;OAFX;;;QAKE3C,QAAJ,EAAc;MACZA,QAAQ,CAAC8C,UAAT;;;QAGE/C,MAAJ,EAAY;MACVA,MAAM,CAAC+C,UAAP;;;QAGIC,YAAY,GAAGlG,YAAY,CAC/BqD,UAAU,CAACR,QADoB,EAE/BQ,UAAU,CAACnD,eAFoB,CAAjC;QAIMiG,aAAa,GAAGnG,YAAY,CAChCqD,UAAU,CAACP,SADqB,EAEhCO,UAAU,CAACnD,eAFqB,CAAlC;QAIMkG,KAAK,GAAG9C,MAAM,GAChB4C,YADgB,GAEhBxF,UAAU,CAACwF,YAAD,EAAeC,aAAf,CAFd;QAIME,WAAW,GAAiB5E,gBAAgB,CAChD2E,KADgD,EAEhD5D,mBAFgD,EAGhDiB,MAAM,CAACD,UAHyC,CAAlD;IAMAJ,IAAI,GAAGgC,SAAS,CAACiB,WAAD,CAAhB;GAjCF;;MAoCMC,QAAQ,GAAG,SAAXA,QAAW;QACTlD,IAAI,GAAGmD,OAAO,EAApB;;QAEI,CAACnD,IAAD,IAAS,CAACoD,MAAV,IAAoB,CAACC,QAArB,IAAiC,CAACC,GAAtC,EAA2C;;;;QAIrCC,GAAG,GAAGD,GAAG,CAACE,eAAJ,CAAoBxD,IAApB,CAAZ;QACMyD,CAAC,GAAGJ,QAAQ,CAACK,aAAT,CAAuB,GAAvB,CAAV;IACAL,QAAQ,CAACM,IAAT,CAAcC,WAAd,CAA0BH,CAA1B;IACAA,CAAC,CAACI,IAAF,GAASN,GAAT;IACAE,CAAC,CAACP,QAAF,GAAgB,IAAIY,IAAJ,GAAWC,WAAX,EAAhB;IACAN,CAAC,CAACO,KAAF;IACAZ,MAAM,CAACE,GAAP,CAAWW,eAAX,CAA2BV,GAA3B;GAbF;;MAgBMJ,OAAO,GAAG,SAAVA,OAAU;WAAMnD,IAAN;GAAhB;;SAEO;IACLQ,KAAK,EAALA,KADK;IAELkC,IAAI,EAAJA,IAFK;IAGLX,KAAK,EAALA,KAHK;IAILmB,QAAQ,EAARA,QAJK;IAKLC,OAAO,EAAPA;GALF;CArJK;;;;"}