'use strict';
var e = function(e, t) {
    var n = 0;
    return e.reduce(function(e, t) {
      return e.set(t, n), (n += t.length), e;
    }, new Float32Array(t));
  },
  t = function(e, t, n) {
    n.split('')
      .map(function(e, t) {
        return n.charCodeAt(t);
      })
      .forEach(function(n, r) {
        e.setUint8(t + r, n);
      });
  };
exports.Microphone = function(n) {
  var r,
    a,
    o,
    i,
    c = { leftChan: [], rightChan: [], recordingLength: 0 },
    u = !(!n || !n.isMono),
    h = u ? 1 : 2,
    f = (n && n.sampleRate) || 44100,
    s = { nbChannels: h, sampleRate: f, bufferSize: 2048, byteRate: f * h * 2 },
    l = function() {
      return i;
    };
  return {
    start: function() {
      try {
        return Promise.resolve(
          navigator.mediaDevices.getUserMedia({ audio: !0, video: !1 })
        ).then(function(e) {
          r = e;
          var t = new AudioContext(),
            i = t.createGain();
          (a = t.createMediaStreamSource(r)),
            ((o = t.createScriptProcessor(
              s.bufferSize,
              2,
              2
            )).onaudioprocess = function(e) {
              var t = new Float32Array(e.inputBuffer.getChannelData(0));
              c.leftChan.push(t),
                c.rightChan.push(
                  new Float32Array(e.inputBuffer.getChannelData(1))
                ),
                (c.recordingLength += s.bufferSize),
                n && n.onData && n.onData(t);
            }),
            a.connect(i),
            a.connect(o),
            o.connect(t.destination);
        });
      } catch (e) {
        return Promise.reject(e);
      }
    },
    stop: function() {
      r &&
        r.getTracks().forEach(function(e) {
          return e.stop();
        }),
        o && o.disconnect(),
        a && a.disconnect();
      var n,
        h = e(c.leftChan, c.recordingLength),
        f = e(c.rightChan, c.recordingLength),
        l = (function(e, t, n) {
          if (44100 === n) return e;
          for (
            var r = 44100 / n,
              a = Math.round(e.length / r),
              o = new Float32Array(a),
              i = 0,
              c = 0;
            i < o.length;

          ) {
            for (
              var u = Math.round((i + 1) * r), h = 0, f = 0, s = c;
              s < u && s < e.length;
              s++
            )
              (h += e[s]), f++;
            (o[i] = h / f), i++, (c = u);
          }
          return o;
        })(
          u
            ? h
            : (n = h).reduce(function(e, t, r) {
                var a = 2 * r;
                return (e[a] = n[r]), (e[a + 1] = n[r]), e;
              }, new Float32Array(n.length + f.length)),
          0,
          s.sampleRate
        );
      i = (function(e) {
        var n = new ArrayBuffer(44 + 2 * e.length),
          r = new DataView(n);
        t(r, 0, 'RIFF'),
          r.setUint32(4, 44 + 2 * e.length, !0),
          t(r, 8, 'WAVE'),
          t(r, 12, 'fmt '),
          r.setUint32(16, 16, !0),
          r.setUint16(20, 1, !0),
          r.setUint16(22, s.nbChannels, !0),
          r.setUint32(24, s.sampleRate, !0),
          r.setUint32(28, s.byteRate, !0),
          r.setUint16(32, 4, !0),
          r.setUint16(34, 16, !0),
          t(r, 36, 'data'),
          r.setUint32(40, 2 * e.length, !0);
        for (var a = 0; a < e.length; a++)
          r.setInt16(44 + 2 * a, 32767 * e[a], !0);
        return new Blob([r], { type: 'audio/wav' });
      })(l);
    },
    reset: function() {
      c = { leftChan: [], rightChan: [], recordingLength: 0 };
    },
    download: function() {
      var e = l();
      if (e && window && document && URL) {
        var t = URL.createObjectURL(e),
          n = document.createElement('a');
        document.body.appendChild(n),
          (n.href = t),
          (n.download = new Date().toISOString() + '.wav'),
          n.click(),
          window.URL.revokeObjectURL(t);
      }
    },
    getBlob: l,
  };
};
//# sourceMappingURL=microphone-js.cjs.production.min.js.map
