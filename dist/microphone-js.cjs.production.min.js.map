{"version":3,"file":"microphone-js.cjs.production.min.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["export const flattenArray = (\r\n  channelBuffer: Float32Array[],\r\n  recordingLength: number\r\n): Float32Array => {\r\n  let offset = 0;\r\n\r\n  return channelBuffer.reduce((acc, buffer) => {\r\n    acc.set(buffer, offset);\r\n    offset += buffer.length;\r\n    return acc;\r\n  }, new Float32Array(recordingLength));\r\n};\r\n\r\nexport const interleave = (\r\n  leftChannel: Float32Array,\r\n  rightChannel: Float32Array\r\n) => {\r\n  const length = leftChannel.length + rightChannel.length;\r\n\r\n  return leftChannel.reduce((acc, _, index) => {\r\n    const offset = index * 2;\r\n\r\n    acc[offset] = leftChannel[index];\r\n    acc[offset + 1] = leftChannel[index];\r\n    return acc;\r\n  }, new Float32Array(length));\r\n};\r\n\r\nexport const writeUTFBytes = (\r\n  view: DataView,\r\n  offset: number,\r\n  str: string\r\n): any => {\r\n  str\r\n    .split('')\r\n    .map((_, index) => str.charCodeAt(index))\r\n    .forEach((value, idx) => {\r\n      view.setUint8(offset + idx, value);\r\n    });\r\n};\r\n\r\nexport const downsampleBuffer = (\r\n  buffer: Float32Array,\r\n  currentSampleRate: number,\r\n  targetSampleRate: number\r\n) => {\r\n  if (targetSampleRate === currentSampleRate) {\r\n    return buffer;\r\n  }\r\n  var sampleRateRatio = currentSampleRate / targetSampleRate;\r\n  var newLength = Math.round(buffer.length / sampleRateRatio);\r\n  var result = new Float32Array(newLength);\r\n  var offsetResult = 0;\r\n  var offsetBuffer = 0;\r\n  while (offsetResult < result.length) {\r\n    var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\r\n    var accum = 0,\r\n      count = 0;\r\n    for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\r\n      accum += buffer[i];\r\n      count++;\r\n    }\r\n    result[offsetResult] = accum / count;\r\n    offsetResult++;\r\n    offsetBuffer = nextOffsetBuffer;\r\n  }\r\n  return result;\r\n};\r\n","import './types';\r\n\r\nimport {\r\n  writeUTFBytes,\r\n  flattenArray,\r\n  interleave,\r\n  downsampleBuffer,\r\n} from './utils';\r\n\r\nconst NB_CHANNELS = 2;\r\nconst DEFAULT_SAMPLE_RATE = 44100;\r\nconst BUFFER_SIZE = 2048;\r\nconst LEFT_CHAN_DATA = 0;\r\nconst RIGHT_CHAN_DATA = 1;\r\n\r\nconst initialState = () : AudioState => {\r\n    return {    \r\n      leftChan: [],\r\n      rightChan: [],\r\n      recordingLength: 0,\r\n    }\r\n};\r\n\r\nexport const Microphone = (\r\n  instanceConfig?: InstanceConfig\r\n): MicrophoneInstance => {\r\n  let mediaStream: MediaStream | undefined;\r\n  let source: MediaStreamAudioSourceNode | undefined;\r\n  let recorder: ScriptProcessorNode | undefined;\r\n  let blob: Blob | undefined;\r\n  let audioState: AudioState = initialState();\r\n\r\n  const isMono: boolean = !!(instanceConfig && instanceConfig.isMono);\r\n\r\n  const nbChannels: number = isMono ? 1 : NB_CHANNELS;\r\n\r\n  const sampleRate =\r\n    (instanceConfig && instanceConfig.sampleRate) || DEFAULT_SAMPLE_RATE;\r\n\r\n  const config: Config = {\r\n    nbChannels,\r\n    sampleRate,\r\n    bufferSize: BUFFER_SIZE,\r\n    byteRate: sampleRate * nbChannels * 2,\r\n  };\r\n\r\n  const start = async () => {\r\n    mediaStream = await navigator.mediaDevices.getUserMedia({\r\n      audio: true,\r\n      video: false,\r\n    });\r\n\r\n    const audioCtx = new AudioContext();\r\n    const volume = audioCtx.createGain();\r\n    source = audioCtx.createMediaStreamSource(mediaStream);\r\n\r\n    const numberOfInputChannels = 2;\r\n    const numberOfOutputChannels = 2;\r\n\r\n    recorder = audioCtx.createScriptProcessor(\r\n      config.bufferSize,\r\n      numberOfInputChannels,\r\n      numberOfOutputChannels\r\n    );\r\n\r\n    recorder.onaudioprocess = (event: AudioProcessingEvent) => {\r\n      const left: Float32Array = new Float32Array(\r\n        event.inputBuffer.getChannelData(LEFT_CHAN_DATA)\r\n      );\r\n\r\n      audioState.leftChan.push(left);\r\n\r\n      audioState.rightChan.push(\r\n        new Float32Array(event.inputBuffer.getChannelData(RIGHT_CHAN_DATA))\r\n      );\r\n\r\n      audioState.recordingLength += config.bufferSize;\r\n\r\n      if (instanceConfig && instanceConfig.onData) {\r\n        instanceConfig.onData(left);\r\n      }\r\n    };\r\n\r\n    source.connect(volume);\r\n    source.connect(recorder);\r\n    recorder.connect(audioCtx.destination);\r\n  };\r\n\r\n  const reset = () => {\r\n    audioState = initialState();\r\n  };\r\n\r\n  // // http://soundfile.sapp.org/doc/WaveFormat/\r\n  const encodeWav = (data: Float32Array): Blob => {\r\n    const arrayBuffer = new ArrayBuffer(44 + data.length * 2);\r\n    const view = new DataView(arrayBuffer);\r\n\r\n    writeUTFBytes(view, 0, 'RIFF');\r\n    view.setUint32(4, 44 + data.length * 2, true);\r\n    writeUTFBytes(view, 8, 'WAVE');\r\n    writeUTFBytes(view, 12, 'fmt ');\r\n    view.setUint32(16, 16, true);\r\n    view.setUint16(20, 1, true);\r\n    view.setUint16(22, config.nbChannels, true);\r\n    view.setUint32(24, config.sampleRate, true);\r\n    view.setUint32(28, config.byteRate, true);\r\n    view.setUint16(32, 4, true);\r\n    view.setUint16(34, 16, true);\r\n    writeUTFBytes(view, 36, 'data');\r\n    view.setUint32(40, data.length * 2, true);\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      view.setInt16(44 + i * 2, (data[i] as any) * 0x7fff, true);\r\n    }\r\n\r\n    return new Blob([view], { type: 'audio/wav' });\r\n  };\r\n\r\n  const stop = () => {\r\n    if (mediaStream) {\r\n      mediaStream\r\n        .getTracks()\r\n        .forEach((track: MediaStreamTrack) => track.stop());\r\n    }\r\n\r\n    if (recorder) {\r\n      recorder.disconnect();\r\n    }\r\n\r\n    if (source) {\r\n      source.disconnect();\r\n    }\r\n\r\n    const leftChanData = flattenArray(\r\n      audioState.leftChan,\r\n      audioState.recordingLength\r\n    );\r\n    const rightChanData = flattenArray(\r\n      audioState.rightChan,\r\n      audioState.recordingLength\r\n    );\r\n    const array = isMono\r\n      ? leftChanData\r\n      : interleave(leftChanData, rightChanData);\r\n\r\n    const downsampled: Float32Array = downsampleBuffer(\r\n      array,\r\n      DEFAULT_SAMPLE_RATE,\r\n      config.sampleRate\r\n    );\r\n\r\n    blob = encodeWav(downsampled);\r\n  };\r\n\r\n  const download = () => {\r\n    const blob = getBlob();\r\n\r\n    if (!blob || !window || !document || !URL) {\r\n      return;\r\n    }\r\n\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    document.body.appendChild(a);\r\n    a.href = url;\r\n    a.download = `${new Date().toISOString()}.wav`;\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const getBlob = () => blob;\r\n\r\n  return {\r\n    start,\r\n    stop,\r\n    reset,\r\n    download,\r\n    getBlob,\r\n  };\r\n};\r\n"],"names":["flattenArray","channelBuffer","recordingLength","offset","reduce","acc","buffer","set","length","Float32Array","writeUTFBytes","view","str","split","map","_","index","charCodeAt","forEach","value","idx","setUint8","instanceConfig","mediaStream","source","recorder","blob","audioState","leftChan","rightChan","isMono","nbChannels","sampleRate","config","bufferSize","byteRate","getBlob","start","navigator","mediaDevices","getUserMedia","audio","video","audioCtx","AudioContext","volume","createGain","createMediaStreamSource","createScriptProcessor","onaudioprocess","event","left","inputBuffer","getChannelData","push","onData","connect","destination","stop","getTracks","track","disconnect","leftChannel","leftChanData","rightChanData","downsampled","currentSampleRate","targetSampleRate","sampleRateRatio","newLength","Math","round","result","offsetResult","offsetBuffer","nextOffsetBuffer","accum","count","i","downsampleBuffer","data","arrayBuffer","ArrayBuffer","DataView","setUint32","setUint16","setInt16","Blob","type","encodeWav","reset","download","window","document","URL","url","createObjectURL","a","createElement","body","appendChild","href","Date","toISOString","click","revokeObjectURL"],"mappings":"aAAO,IAAMA,EAAe,SAC1BC,EACAC,OAEIC,EAAS,SAENF,EAAcG,OAAO,SAACC,EAAKC,UAChCD,EAAIE,IAAID,EAAQH,GAChBA,GAAUG,EAAOE,OACVH,GACN,IAAII,aAAaP,KAkBTQ,EAAgB,SAC3BC,EACAR,EACAS,GAEAA,EACGC,MAAM,IACNC,IAAI,SAACC,EAAGC,UAAUJ,EAAIK,WAAWD,KACjCE,QAAQ,SAACC,EAAOC,GACfT,EAAKU,SAASlB,EAASiB,EAAKD,yBCdR,SACxBG,OAEIC,EACAC,EACAC,EACAC,EACAC,EAdK,CACLC,SAAU,GACVC,UAAW,GACX3B,gBAAiB,GAaf4B,KAAqBR,IAAkBA,EAAeQ,QAEtDC,EAAqBD,EAAS,EAzBlB,EA2BZE,EACHV,GAAkBA,EAAeU,YA3BV,MA6BpBC,EAAiB,CACrBF,WAAAA,EACAC,WAAAA,EACAE,WA/BgB,KAgChBC,SAAUH,EAAaD,EAAa,GA+HhCK,EAAU,kBAAMV,SAEf,CACLW,4CA9HoBC,UAAUC,aAAaC,aAAa,CACtDC,OAAO,EACPC,OAAO,sBAFTnB,QAKMoB,EAAW,IAAIC,aACfC,EAASF,EAASG,aACxBtB,EAASmB,EAASI,wBAAwBxB,IAK1CE,EAAWkB,EAASK,sBAClBf,EAAOC,WAJqB,EACC,IAQtBe,eAAiB,SAACC,OACnBC,EAAqB,IAAI1C,aAC7ByC,EAAME,YAAYC,eAvDH,IA0DjB1B,EAAWC,SAAS0B,KAAKH,GAEzBxB,EAAWE,UAAUyB,KACnB,IAAI7C,aAAayC,EAAME,YAAYC,eA5DnB,KA+DlB1B,EAAWzB,iBAAmB+B,EAAOC,WAEjCZ,GAAkBA,EAAeiC,QACnCjC,EAAeiC,OAAOJ,IAI1B3B,EAAOgC,QAAQX,GACfrB,EAAOgC,QAAQ/B,GACfA,EAAS+B,QAAQb,EAASc,mDAyF1BC,KAxDW,WACPnC,GACFA,EACGoC,YACAzC,QAAQ,SAAC0C,UAA4BA,EAAMF,SAG5CjC,GACFA,EAASoC,aAGPrC,GACFA,EAAOqC,iBDpHXC,ECuHQC,EAAe/D,EACnB2B,EAAWC,SACXD,EAAWzB,iBAEP8D,EAAgBhE,EACpB2B,EAAWE,UACXF,EAAWzB,iBAMP+D,EDxGsB,SAC9B3D,EACA4D,EACAC,MClC0B,QDoCtBA,SACK7D,UAEL8D,ECvCsB,MDuCgBD,EACtCE,EAAYC,KAAKC,MAAMjE,EAAOE,OAAS4D,GACvCI,EAAS,IAAI/D,aAAa4D,GAC1BI,EAAe,EACfC,EAAe,EACZD,EAAeD,EAAOhE,QAAQ,SAC/BmE,EAAmBL,KAAKC,OAAOE,EAAe,GAAKL,GACnDQ,EAAQ,EACVC,EAAQ,EACDC,EAAIJ,EAAcI,EAAIH,GAAoBG,EAAIxE,EAAOE,OAAQsE,IACpEF,GAAStE,EAAOwE,GAChBD,IAEFL,EAAOC,GAAgBG,EAAQC,EAC/BJ,IACAC,EAAeC,SAEVH,EC+E6BO,CAJpBjD,EACViC,GDhIND,ECiIiBC,GD5HE3D,OAAO,SAACC,EAAKU,EAAGC,OAC3Bb,EAAiB,EAARa,SAEfX,EAAIF,GAAU2D,EAAY9C,GAC1BX,EAAIF,EAAS,GAAK2D,EAAY9C,GACvBX,GACN,IAAII,aARQqD,EAAYtD,OC8HIwD,ED9HkBxD,SCPvB,EA0ItByB,EAAOD,YAGTN,EA1DgB,SAACsD,OACXC,EAAc,IAAIC,YAAY,GAAmB,EAAdF,EAAKxE,QACxCG,EAAO,IAAIwE,SAASF,GAE1BvE,EAAcC,EAAM,EAAG,QACvBA,EAAKyE,UAAU,EAAG,GAAmB,EAAdJ,EAAKxE,QAAY,GACxCE,EAAcC,EAAM,EAAG,QACvBD,EAAcC,EAAM,GAAI,QACxBA,EAAKyE,UAAU,GAAI,IAAI,GACvBzE,EAAK0E,UAAU,GAAI,GAAG,GACtB1E,EAAK0E,UAAU,GAAIpD,EAAOF,YAAY,GACtCpB,EAAKyE,UAAU,GAAInD,EAAOD,YAAY,GACtCrB,EAAKyE,UAAU,GAAInD,EAAOE,UAAU,GACpCxB,EAAK0E,UAAU,GAAI,GAAG,GACtB1E,EAAK0E,UAAU,GAAI,IAAI,GACvB3E,EAAcC,EAAM,GAAI,QACxBA,EAAKyE,UAAU,GAAkB,EAAdJ,EAAKxE,QAAY,OAE/B,IAAIsE,EAAI,EAAGA,EAAIE,EAAKxE,OAAQsE,IAC/BnE,EAAK2E,SAAS,GAAS,EAAJR,EAA0B,MAAlBE,EAAKF,IAAqB,UAGhD,IAAIS,KAAK,CAAC5E,GAAO,CAAE6E,KAAM,cAoCzBC,CAAUxB,IAwBjByB,MAvFY,WACZ/D,EAzEO,CACLC,SAAU,GACVC,UAAW,GACX3B,gBAAiB,IA6JnByF,SAtBe,eACTjE,EAAOU,OAERV,GAASkE,QAAWC,UAAaC,SAIhCC,EAAMD,IAAIE,gBAAgBtE,GAC1BuE,EAAIJ,SAASK,cAAc,KACjCL,SAASM,KAAKC,YAAYH,GAC1BA,EAAEI,KAAON,EACTE,EAAEN,UAAc,IAAIW,MAAOC,qBAC3BN,EAAEO,QACFZ,OAAOE,IAAIW,gBAAgBV,KAU3B3D,QAAAA"}